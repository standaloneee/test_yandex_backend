/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.stand.contest.restapi_yandex.controller;

import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import ru.stand.contest.restapi_yandex.model.Error;
import ru.stand.contest.restapi_yandex.model.SystemItemHistoryResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-09T13:45:12.975114900+03:00[Europe/Moscow]")
@Validated
@Tag(name = "updates", description = "the updates API")
public interface UpdatesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /updates
     * Получение списка **файлов**, которые были обновлены за последние 24 часа включительно [date - 24h, date] от времени переданном в запросе. 
     *
     * @param date Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400 (required)
     * @return Список элементов, которые были обновлены. (status code 200)
     *         or Невалидная схема документа или входные данные не верны. (status code 400)
     */
    @Operation(
        operationId = "updatesGet",
        tags = { "Дополнительные задачи" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список элементов, которые были обновлены.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemItemHistoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидная схема документа или входные данные не верны.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/updates",
        produces = { "application/json" }
    )
    default ResponseEntity<SystemItemHistoryResponse> updatesGet(
        @NotNull @Parameter(name = "date", description = "Дата и время запроса. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400", required = true) @Valid @RequestParam(value = "date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Date date
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"id\" : \"элемент_1_4\", \"url\" : \"/file/url1\", \"date\" : \"2022-05-28T21:12:01.000Z\", \"parentId\" : \"элемент_1_1\", \"size\" : 234, \"type\" : \"FILE\" }, { \"id\" : \"элемент_1_4\", \"url\" : \"/file/url1\", \"date\" : \"2022-05-28T21:12:01.000Z\", \"parentId\" : \"элемент_1_1\", \"size\" : 234, \"type\" : \"FILE\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
